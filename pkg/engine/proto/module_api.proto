// pkg/engine/proto/module_api.proto
syntax = "proto3";

package engine;
option go_package = "github.com/pentora-ai/pentora/pkg/engine/proto";

// This service will be IMPLEMENTED BY PENTORA'S CORE.
// External modules will CONNECT TO THIS SERVICE as clients.
service PentoraModuleHost {
  // External module calls this to announce its presence and get tasks,
  // or to send results back. This could be a bi-directional stream.
  // Module sends its metadata first, then Pentora streams tasks,
  // and module streams back results.
  rpc ModuleStream(stream ModuleMessage) returns (stream HostMessage);
}

// Message from External Module to Pentora Host
message ModuleMessage {
  oneof payload {
    ModuleRegistration registration = 1; // First message from module
    TaskOutputResult output_result = 2;  // Subsequent messages with results
    ModuleHeartbeat heartbeat = 3;       // Optional: for long-running modules
  }
}

// Message from Pentora Host to External Module
message HostMessage {
  oneof payload {
    RegistrationAck registration_ack = 1; // Acknowledgement for registration
    ExecuteNewTask execute_task = 2;       // Command to execute a task
    HostControlSignal control_signal = 3; // e.g., shutdown, cancel_task
  }
}

message ModuleRegistration {
  string module_type_name = 1; // e.g., "external-icmp-ping"
  string module_version = 2;
  // Add other relevant metadata the module wants to provide (consumes, produces can be static in DAG for now)
  string instance_hint = 3; // Optional: if Pentora launched multiple instances of this type
}

message RegistrationAck {
  bool success = 1;
  string message = 2;
  string assigned_session_id = 3; // Pentora assigns a session ID for this connection
}

message ExecuteNewTask {
  string task_id = 1;             // Unique ID for this specific task execution
  string instance_id_from_dag = 2; // The InstanceID as defined in Pentora's DAG
  map<string, bytes> inputs = 3;
  map<string, string> module_config = 4;
}

message TaskOutputResult {
  string task_id = 1;            // Correlates with ExecuteNewTask.task_id
  string instance_id_from_dag = 2;
  string data_key = 3;
  bytes data = 4;
  string error_message = 5;
  int64 timestamp = 6;
  string target = 7;
  bool is_final_for_key = 8;
  bool is_task_complete = 9;    // True if this module instance has completed all work for this task_id
}

message ModuleHeartbeat {
  string session_id = 1;
  int64 timestamp = 2;
}

message HostControlSignal {
  string session_id = 1;
  enum SignalType {
    NO_OP = 0;
    REQUEST_SHUTDOWN = 1;
    CANCEL_TASK = 2;
  }
  SignalType signal = 2;
  string task_id_to_cancel = 3; // if signal is CANCEL_TASK
}