// pkg/engine/proto/module_api.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/engine/proto/module_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModuleExecutionService_Execute_FullMethodName = "/engine.ModuleExecutionService/Execute"
)

// ModuleExecutionServiceClient is the client API for ModuleExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ModuleExecutionService will be implemented by each external module.
// Pentora (the core engine) will act as a client to this service
// when it needs to invoke an external module.
type ModuleExecutionServiceClient interface {
	// Pentora calls this RPC to initiate the module's primary task.
	// The module is expected to stream its results (outputs) back to Pentora.
	// The stream nature allows for partial results or continuous data flow.
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteResponse], error)
}

type moduleExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleExecutionServiceClient(cc grpc.ClientConnInterface) ModuleExecutionServiceClient {
	return &moduleExecutionServiceClient{cc}
}

func (c *moduleExecutionServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModuleExecutionService_ServiceDesc.Streams[0], ModuleExecutionService_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteRequest, ExecuteResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModuleExecutionService_ExecuteClient = grpc.ServerStreamingClient[ExecuteResponse]

// ModuleExecutionServiceServer is the server API for ModuleExecutionService service.
// All implementations must embed UnimplementedModuleExecutionServiceServer
// for forward compatibility.
//
// ModuleExecutionService will be implemented by each external module.
// Pentora (the core engine) will act as a client to this service
// when it needs to invoke an external module.
type ModuleExecutionServiceServer interface {
	// Pentora calls this RPC to initiate the module's primary task.
	// The module is expected to stream its results (outputs) back to Pentora.
	// The stream nature allows for partial results or continuous data flow.
	Execute(*ExecuteRequest, grpc.ServerStreamingServer[ExecuteResponse]) error
	mustEmbedUnimplementedModuleExecutionServiceServer()
}

// UnimplementedModuleExecutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleExecutionServiceServer struct{}

func (UnimplementedModuleExecutionServiceServer) Execute(*ExecuteRequest, grpc.ServerStreamingServer[ExecuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedModuleExecutionServiceServer) mustEmbedUnimplementedModuleExecutionServiceServer() {
}
func (UnimplementedModuleExecutionServiceServer) testEmbeddedByValue() {}

// UnsafeModuleExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleExecutionServiceServer will
// result in compilation errors.
type UnsafeModuleExecutionServiceServer interface {
	mustEmbedUnimplementedModuleExecutionServiceServer()
}

func RegisterModuleExecutionServiceServer(s grpc.ServiceRegistrar, srv ModuleExecutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedModuleExecutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModuleExecutionService_ServiceDesc, srv)
}

func _ModuleExecutionService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleExecutionServiceServer).Execute(m, &grpc.GenericServerStream[ExecuteRequest, ExecuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModuleExecutionService_ExecuteServer = grpc.ServerStreamingServer[ExecuteResponse]

// ModuleExecutionService_ServiceDesc is the grpc.ServiceDesc for ModuleExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.ModuleExecutionService",
	HandlerType: (*ModuleExecutionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _ModuleExecutionService_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/engine/proto/module_api.proto",
}
