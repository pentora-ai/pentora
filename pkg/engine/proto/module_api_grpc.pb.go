// pkg/engine/proto/module_api.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/engine/proto/module_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PentoraModuleHost_ModuleStream_FullMethodName = "/engine.PentoraModuleHost/ModuleStream"
)

// PentoraModuleHostClient is the client API for PentoraModuleHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service will be IMPLEMENTED BY PENTORA'S CORE.
// External modules will CONNECT TO THIS SERVICE as clients.
type PentoraModuleHostClient interface {
	// External module calls this to announce its presence and get tasks,
	// or to send results back. This could be a bi-directional stream.
	// Module sends its metadata first, then Pentora streams tasks,
	// and module streams back results.
	ModuleStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModuleMessage, HostMessage], error)
}

type pentoraModuleHostClient struct {
	cc grpc.ClientConnInterface
}

func NewPentoraModuleHostClient(cc grpc.ClientConnInterface) PentoraModuleHostClient {
	return &pentoraModuleHostClient{cc}
}

func (c *pentoraModuleHostClient) ModuleStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ModuleMessage, HostMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PentoraModuleHost_ServiceDesc.Streams[0], PentoraModuleHost_ModuleStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ModuleMessage, HostMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PentoraModuleHost_ModuleStreamClient = grpc.BidiStreamingClient[ModuleMessage, HostMessage]

// PentoraModuleHostServer is the server API for PentoraModuleHost service.
// All implementations must embed UnimplementedPentoraModuleHostServer
// for forward compatibility.
//
// This service will be IMPLEMENTED BY PENTORA'S CORE.
// External modules will CONNECT TO THIS SERVICE as clients.
type PentoraModuleHostServer interface {
	// External module calls this to announce its presence and get tasks,
	// or to send results back. This could be a bi-directional stream.
	// Module sends its metadata first, then Pentora streams tasks,
	// and module streams back results.
	ModuleStream(grpc.BidiStreamingServer[ModuleMessage, HostMessage]) error
	mustEmbedUnimplementedPentoraModuleHostServer()
}

// UnimplementedPentoraModuleHostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPentoraModuleHostServer struct{}

func (UnimplementedPentoraModuleHostServer) ModuleStream(grpc.BidiStreamingServer[ModuleMessage, HostMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ModuleStream not implemented")
}
func (UnimplementedPentoraModuleHostServer) mustEmbedUnimplementedPentoraModuleHostServer() {}
func (UnimplementedPentoraModuleHostServer) testEmbeddedByValue()                           {}

// UnsafePentoraModuleHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PentoraModuleHostServer will
// result in compilation errors.
type UnsafePentoraModuleHostServer interface {
	mustEmbedUnimplementedPentoraModuleHostServer()
}

func RegisterPentoraModuleHostServer(s grpc.ServiceRegistrar, srv PentoraModuleHostServer) {
	// If the following call pancis, it indicates UnimplementedPentoraModuleHostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PentoraModuleHost_ServiceDesc, srv)
}

func _PentoraModuleHost_ModuleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PentoraModuleHostServer).ModuleStream(&grpc.GenericServerStream[ModuleMessage, HostMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PentoraModuleHost_ModuleStreamServer = grpc.BidiStreamingServer[ModuleMessage, HostMessage]

// PentoraModuleHost_ServiceDesc is the grpc.ServiceDesc for PentoraModuleHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PentoraModuleHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "engine.PentoraModuleHost",
	HandlerType: (*PentoraModuleHostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ModuleStream",
			Handler:       _PentoraModuleHost_ModuleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/engine/proto/module_api.proto",
}
